# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.3.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
# Password Manager Created by: Extude
# This software protect by GNU GPL v3.0

import sys, json, hashlib, sqlite3
from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Random import get_random_bytes
from pyperclip import copy
from PyQt6 import QtCore, QtGui, QtWidgets
from base64 import b64encode, b64decode

class Ui_PasswordManager(QtWidgets.QMainWindow, object):
    def __init__(self):
        self.list = 0
        self.illegal = ["None", "Chose one..."]
        self.pw = {}
        self.is_start = False
        super().__init__()

    # Func    
    def value(self, Dialog):
        self.start()
        Dialog.close()

    def encrypt_aes(self, password):
        cipher = AES.new(self.key, AES.MODE_CFB)
        cipheredData = cipher.encrypt(bytes(password, 'utf-8'))
        return [b64encode(cipher.iv).decode('utf-8'), b64encode(cipheredData).decode('utf-8')]

    def decrypt_aes(self, iv, cipheredData):
        cipher = AES.new(self.key, AES.MODE_CFB, iv=iv)
        Data = cipher.decrypt(cipheredData)
        return Data

    def textchanged(self):
        if self.EmailComboBox.currentText() != "Chose one..." and self.NameComboBox.currentText() != "Chose one..." or self.NameComboBox.currentText() != "Chose Email...":
            self.NameComboBox.clear()
            listName = [x[1] for x in self.cur.execute(f"SELECT * FROM \"{self.Username.text()}\" ORDER BY password") if x[0] == self.EmailComboBox.currentText()]
            if listName == []:listName = ["None"]
            else: listName.insert(0, "Chose one...")
            self.NameComboBox.addItems(listName)

    def __Search__(self):
        if self.Search.text() != "":
            if self.Search_ComboBox.currentText() == "Search Name": number = 1
            elif self.Search_ComboBox.currentText() == "Search Email": number = 0
            lst = 0
            self.tableWidget.setRowCount(1)
            self.tableWidget.setVerticalHeaderItem(lst, QtWidgets.QTableWidgetItem())
            self.tableWidget.setItem(0, 0, QtWidgets.QTableWidgetItem())
            self.tableWidget.setItem(0, 1, QtWidgets.QTableWidgetItem())
            self.tableWidget.setItem(0, 2, QtWidgets.QTableWidgetItem())
            for row in self.cur.execute(f"SELECT * FROM \"{self.Username.text()}\" ORDER BY password"):
                if self.Search.text().lower() in row[number].lower():
                    self.tableWidget.setRowHeight(lst, self.JSONFORMHEIGHT)
                    self.tableWidget.setRowCount(lst + 1)
                    self.tableWidget.setVerticalHeaderItem(lst, QtWidgets.QTableWidgetItem())
                    self.tableWidget.setItem(lst, 0, QtWidgets.QTableWidgetItem(row[0]))
                    self.tableWidget.setItem(lst, 1, QtWidgets.QTableWidgetItem(row[1]))
                    aes = self.decrypt_aes(b64decode(row[2].encode('utf-8')), b64decode(row[3].encode('utf-8')))
                    self.tableWidget.setItem(lst, 2, QtWidgets.QTableWidgetItem("*"*len(aes)))
                    self.tableWidget.setRowHeight(lst, self.JSONFORMHEIGHT)
                    lst += 1
        elif self.Search.text() == "":
            self.start()

    def DelOk(self, Dialog):
        if not self.EmailComboBox.currentText() in self.illegal and not self.NameComboBox.currentText() in self.illegal:
            self.cur.execute(f"DELETE FROM \"{self.Username.text()}\" WHERE email='{self.EmailComboBox.currentText()}' and name='{self.NameComboBox.currentText()}'")
            self.con.commit()
            self.start()
            Dialog.close()

    def AddOk(self, Dialog):
        if self.DialogEmail.text() != "" and self.DialogEmailName.text() != "" and self.DialogEmailPassword.text() != "" and self.DialogEmail.text() != "None" and self.DialogEmailName.text() != "None":
            encrypted_password = self.encrypt_aes(self.DialogEmailPassword.text())
            try:self.cur.execute(f"DELETE FROM \"{self.Username.text()}\" WHERE email='{self.DialogEmail.text()}' and name='{self.DialogEmailName.text()}'")
            except:pass
            self.cur.execute(f"INSERT INTO \"{self.Username.text()}\" VALUES ('{self.DialogEmail.text()}','{self.DialogEmailName.text()}', '{encrypted_password[0]}', '{encrypted_password[1]}')")
            self.con.commit()
            self.start()
            Dialog.close()
        elif self.DialogEmail.text() != "" and self.DialogEmailName.text() != "" and self.DialogEmailPassword.text() == "":
            self.information("Password should not empty!")
        elif self.DialogEmail.text() in self.illegal and self.DialogEmailName.text() in self.illegal:
            self.information("Cannot use illegal words on eMail and Name!")

    def copyPassword(self, Item):
        try:
            if Item.column() == 2:
                row = Item.row()
                copy(self.pw[row].decode("utf-8"))
            else:
                copy(Item.text())
        except:
            pass
    
    def do_start(self, Dialog):
        try:
            with open("settings.json", "r") as settings:
                self.settings = json.load(settings)
            self.UserSettings = self.settings[self.Username.text()]
            self.JSONUserName = self.UserSettings["NAME"]
            self.JSONUserPassword = self.UserSettings["PASSWORD"]
            self.JSONAESKEY = self.UserSettings["AESKEY"]
            self.JSONFORMHEIGHT = self.UserSettings["FORMHEIGHT"]
            self.JSONDARKMODE = self.UserSettings["DARKMODE"]
            if self.Username.text() == self.JSONUserName and hashlib.sha256(self.Password.text().encode('utf-8')).hexdigest() == self.JSONUserPassword:
                try:
                    self.con = sqlite3.connect("database.db")
                    self.cur = self.con.cursor()
                    self.cur.execute(f'''CREATE TABLE IF NOT EXISTS \"{self.Username.text()}\"
               (email text, name text, iv text, password text)''')
                    self.key = PBKDF2(hashlib.sha512(self.Password.text().encode('utf-8')).hexdigest(), b64decode(self.JSONAESKEY.encode("utf-8")), dkLen=32)
                except Exception as Exp: print(Exp)
                self.is_start = True
                Dialog.close()
        except:
            self.information("Wrong Username or Password!")

    def reg(self, Dialog):
        x = get_random_bytes(32)
        settings = {
                "NAME": self.RegisterUsername.text(),
                "PASSWORD": hashlib.sha256(self.RegisterPassword.text().encode('utf-8')).hexdigest(),
                "AESKEY": b64encode(x).decode("utf-8"),
                "FORMHEIGHT": 24,
                "DARKMODE": False
            }
        self.cur.execute(f'''CREATE TABLE IF NOT EXISTS "{self.RegisterUsername.text()}"
               (email text, name text, iv text, password text)''')
        self.con.commit()
        with open("settings.json", "r") as load:
            json_file = json.load(load)
        if self.RegisterUsername.text() not in json_file:
            json_file[self.RegisterUsername.text()] = settings
            with open("settings.json", "w") as write:
                json.dump(json_file, write)
            Dialog.close()
        else:
            self.information("Name already used!")

    def start(self):
        lst = 0
        self.tableWidget.setRowCount(1)
        self.tableWidget.setRowHeight(0, self.JSONFORMHEIGHT)
        self.tableWidget.setVerticalHeaderItem(lst, QtWidgets.QTableWidgetItem())
        self.tableWidget.setItem(0, 0, QtWidgets.QTableWidgetItem())
        self.tableWidget.setItem(0, 1, QtWidgets.QTableWidgetItem())
        self.tableWidget.setItem(0, 2, QtWidgets.QTableWidgetItem())
        for row in self.cur.execute(f"SELECT * FROM \"{self.Username.text()}\" ORDER BY password"):
            self.tableWidget.setRowCount(lst + 1)
            item = QtWidgets.QTableWidgetItem()
            self.tableWidget.setVerticalHeaderItem(lst, item)
            self.tableWidget.setItem(lst, 0, QtWidgets.QTableWidgetItem(row[0]))
            self.tableWidget.setItem(lst, 1, QtWidgets.QTableWidgetItem(row[1]))
            aes = self.decrypt_aes(b64decode(row[2].encode('utf-8')), b64decode(row[3].encode('utf-8')))
            self.tableWidget.setItem(lst, 2, QtWidgets.QTableWidgetItem("*"*len(aes)))
            self.tableWidget.setRowHeight(lst, self.JSONFORMHEIGHT)
            self.pw[lst] = aes
            lst += 1
        self.vbox.addWidget(self.tableWidget)

    # GUI
    def information(self, text):
        reply = QtWidgets.QMessageBox()
        reply.setText(text)
        reply.setWindowTitle("Information")
        reply.setWindowIcon(QtGui.QIcon("icon.ico"))
        reply.exec()

    def DELPW(self):
        Dialog = QtWidgets.QDialog()
        Dialog.setObjectName("Dialog")
        EMail_Title = QtWidgets.QLabel("Email:", Dialog)
        EMail_Title.setGeometry(QtCore.QRect(10, 10, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        EMail_Title.setFont(font)
        EMail_Title.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        EMail_Title.setObjectName("EMail_Title")
        Name_Title = QtWidgets.QLabel("Name:", Dialog)
        Name_Title.setGeometry(QtCore.QRect(10, 40, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        Name_Title.setFont(font)
        Name_Title.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        Name_Title.setObjectName("Name_Title")
        self.EmailComboBox = QtWidgets.QComboBox(Dialog)
        self.EmailComboBox.setObjectName(u"Email")
        self.EmailComboBox.setGeometry(QtCore.QRect(70, 10, 151, 22))
        self.NameComboBox = QtWidgets.QComboBox(Dialog)
        self.NameComboBox.setObjectName(u"Name")
        self.NameComboBox.setGeometry(QtCore.QRect(70, 40, 151, 22))
        Sure = QtWidgets.QDialogButtonBox(Dialog)
        Sure.setGeometry(QtCore.QRect(37, 70, 156, 24))
        Sure.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Cancel|QtWidgets.QDialogButtonBox.StandardButton.Ok)
        Sure.setObjectName("Sure")
        #func
        listEmail = [x[0] for x in self.cur.execute(f'SELECT * FROM \"{self.Username.text()}\" ORDER BY password')]
        if listEmail == []:listEmail = ["None"]
        else:
            listEmail =  list(dict.fromkeys(listEmail))
            listEmail.insert(0, "Chose one...")
        self.NameComboBox.clear()
        listName = [y[1] for y in self.cur.execute(f'SELECT * FROM \"{self.Username.text()}\" ORDER BY password')]
        if listName == []:listName = ["None"]
        else:listName = ["Chose Email..."]
        self.EmailComboBox.addItems(listEmail)
        self.NameComboBox.addItems(listName)
        #End
        self.EmailComboBox.currentIndexChanged.connect(self.textchanged)
        self.EmailComboBox.currentIndexChanged.connect(self.textchanged)
        Sure.accepted.connect(lambda: self.DelOk(Dialog))
        Sure.rejected.connect(lambda: Dialog.close())
        
        Dialog.resize(231, 100)
        Dialog.setMinimumSize(QtCore.QSize(231, 100))
        Dialog.setMaximumSize(QtCore.QSize(231, 100))
        Dialog.setWindowTitle("Delete Password")
        Dialog.setWindowIcon(QtGui.QIcon("icon.ico"))
        Dialog.exec()

    def ADDPW(self):
        Dialog = QtWidgets.QDialog()

        EMail_Title = QtWidgets.QLabel("Email:", Dialog)
        EMail_Title.setGeometry(QtCore.QRect(10, 10, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        EMail_Title.setFont(font)
        EMail_Title.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        EMail_Title.setObjectName("EMail_Title")
        self.DialogEmail = QtWidgets.QLineEdit(Dialog)
        self.DialogEmail.setGeometry(QtCore.QRect(70, 10, 151, 21))
        self.DialogEmail.setObjectName("Email")
        Name_Title = QtWidgets.QLabel("Name:", Dialog)
        Name_Title.setGeometry(QtCore.QRect(10, 40, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        Name_Title.setFont(font)
        Name_Title.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        Name_Title.setObjectName("Name_Title")
        self.DialogEmailName = QtWidgets.QLineEdit(Dialog)
        self.DialogEmailName.setGeometry(QtCore.QRect(70, 40, 151, 21))
        self.DialogEmailName.setObjectName("Name")
        Name_Title = QtWidgets.QLabel("Password:", Dialog)
        Name_Title.setGeometry(QtCore.QRect(-3, 70, 70, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        Name_Title.setFont(font)
        Name_Title.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        Name_Title.setObjectName("Name_Title_2")
        self.DialogEmailPassword = QtWidgets.QLineEdit(Dialog)
        self.DialogEmailPassword.setGeometry(QtCore.QRect(70, 70, 151, 21))
        self.DialogEmailPassword.setObjectName("Password")
        self.DialogEmailPassword.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        buttonBox.setGeometry(QtCore.QRect(40, 100, 156, 24))
        buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Cancel|QtWidgets.QDialogButtonBox.StandardButton.Ok)
        buttonBox.setObjectName("buttonBox")

        buttonBox.accepted.connect(lambda: self.AddOk(Dialog))
        buttonBox.rejected.connect(lambda: Dialog.close())

        Dialog.resize(230, 130)
        Dialog.setMinimumSize(QtCore.QSize(230, 130))
        Dialog.setMaximumSize(QtCore.QSize(230, 130))
        Dialog.setWindowTitle("Add/Change Password")
        Dialog.setWindowIcon(QtGui.QIcon("icon.ico"))
        Dialog.exec()

    def Login(self):
        Dialog = QtWidgets.QDialog()
        Dialog.setObjectName("Dialog")
        Dialog.resize(261, 175)
        label = QtWidgets.QLabel(Dialog)
        label.setGeometry(QtCore.QRect(50, 0, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(False)
        label.setFont(font)
        label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        label.setObjectName("label")
        self.Username = QtWidgets.QLineEdit(Dialog)
        self.Username.setGeometry(QtCore.QRect(90, 60, 151, 21))
        self.Username.setObjectName("Username")
        label_2 = QtWidgets.QLabel(Dialog)
        label_2.setGeometry(QtCore.QRect(20, 60, 61, 21))
        label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        label_2.setObjectName("label_2")
        label_3 = QtWidgets.QLabel(Dialog)
        label_3.setGeometry(QtCore.QRect(20, 90, 61, 21))
        label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        label_3.setObjectName("label_3")
        self.Password = QtWidgets.QLineEdit(Dialog)
        self.Password.setGeometry(QtCore.QRect(90, 90, 151, 21))
        self.Password.setObjectName("Password")
        self.Password.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        ButtonBox = QtWidgets.QDialogButtonBox(Dialog)
        ButtonBox.setGeometry(QtCore.QRect(50, 120, 161, 24))
        ButtonBox.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Cancel|QtWidgets.QDialogButtonBox.StandardButton.Ok)
        ButtonBox.setObjectName("ButtonBox")
        Register_account = QtWidgets.QPushButton(Dialog)
        Register_account.setObjectName(u"Register_account")
        Register_account.setGeometry(QtCore.QRect(40, 150, 181, 23))

        #func
        ButtonBox.accepted.connect(lambda: self.do_start(Dialog))
        ButtonBox.rejected.connect(lambda: sys.exit())
        Register_account.clicked.connect(lambda: self.Register())
        #end
        Dialog.setWindowIcon(QtGui.QIcon("icon.ico"))
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Login"))
        label.setText(_translate("Dialog", "Login"))
        label_2.setText(_translate("Dialog", "Username:"))
        label_3.setText(_translate("Dialog", "Password:"))
        Register_account.setText(_translate("Dialog", "Do not have account? SIgn Up"))

        self.con = sqlite3.connect("database.db")
        self.cur = self.con.cursor()

        Dialog.exec()

    def Register(self):
        Dialog = QtWidgets.QDialog()
        Dialog.setObjectName("Dialog")
        Dialog.resize(261, 151)
        label = QtWidgets.QLabel(Dialog)
        label.setGeometry(QtCore.QRect(50, 0, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(False)
        label.setFont(font)
        label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        label.setObjectName("label")
        label_3 = QtWidgets.QLabel(Dialog)
        label_3.setGeometry(QtCore.QRect(20, 90, 61, 21))
        label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        label_3.setObjectName("label_3")
        RegisterButtonBox = QtWidgets.QDialogButtonBox(Dialog)
        RegisterButtonBox.setGeometry(QtCore.QRect(50, 120, 161, 24))
        RegisterButtonBox.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Cancel|QtWidgets.QDialogButtonBox.StandardButton.Ok)
        RegisterButtonBox.setObjectName("ButtonBox")
        self.RegisterPassword = QtWidgets.QLineEdit(Dialog)
        self.RegisterPassword.setGeometry(QtCore.QRect(90, 90, 151, 21))
        self.RegisterPassword.setObjectName("Password")
        self.RegisterPassword.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        self.RegisterUsername = QtWidgets.QLineEdit(Dialog)
        self.RegisterUsername.setGeometry(QtCore.QRect(90, 60, 151, 21))
        self.RegisterUsername.setObjectName("Username")
        label_2 = QtWidgets.QLabel(Dialog)
        label_2.setGeometry(QtCore.QRect(20, 60, 61, 21))
        label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        label_2.setObjectName("label_2")
        Dialog.setWindowIcon(QtGui.QIcon("icon.ico"))
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Register"))
        label.setText(_translate("Dialog", "Register"))
        label_3.setText(_translate("Dialog", "Password:"))
        label_2.setText(_translate("Dialog", "Username:"))
        #func
        RegisterButtonBox.accepted.connect(lambda: self.reg(Dialog))
        RegisterButtonBox.rejected.connect(lambda: Dialog.close())
        #end
        Dialog.exec()

    def setupUi(self, PasswordManager):
        plus = 20
        PasswordManager.setObjectName("PasswordManager")
        PasswordManager.resize(491, 411 + plus)
        PasswordManager.setMinimumSize(QtCore.QSize(491, 411 + plus))
        PasswordManager.setMaximumSize(QtCore.QSize(491, 411 + plus))

        self.AddPassword = QtWidgets.QPushButton(PasswordManager)
        self.AddPassword.setGeometry(QtCore.QRect(20, 70 + plus, 210, 62))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(False)
        self.AddPassword.setFont(font)
        self.AddPassword.setObjectName("AddPassword")
        self.Title = QtWidgets.QLabel(PasswordManager)
        self.Title.setGeometry(QtCore.QRect(20, 0 + plus, 461, 61))
        font = QtGui.QFont()
        font.setPointSize(26)
        font.setBold(True)
        self.Title.setFont(font)
        self.Title.setObjectName("Title")
        self.Search = QtWidgets.QLineEdit(PasswordManager)
        self.Search.setGeometry(QtCore.QRect(270, 99 + plus, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Search.setFont(font)
        self.Search.setStyleSheet("")
        self.Search.setObjectName("Search")
        self.Search_ComboBox = QtWidgets.QComboBox(PasswordManager)
        self.Search_ComboBox.setObjectName(u"Search_ComboBox")
        self.Search_ComboBox.setGeometry(QtCore.QRect(360, 70 + plus, 111, 22))
        self.Search_ComboBox.addItems(["Search Name", "Search Email"])
        self.label = QtWidgets.QLabel(PasswordManager)
        self.label.setGeometry(QtCore.QRect(280, 70 + plus, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        
        self.vbox = QtWidgets.QVBoxLayout()
        self.tableWidget = QtWidgets.QTableWidget(PasswordManager)
        self.tableWidget.setGeometry(QtCore.QRect(10, 140 + plus, 471, 261))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(1)
        self.tableWidget.setColumnWidth(50, 1)
        self.tableWidget.setVerticalHeaderItem(self.list, QtWidgets.QTableWidgetItem())
        self.fnt = QtGui.QFont()
        self.fnt.setBold(True)
        EmailItem = QtWidgets.QTableWidgetItem("Email")
        EmailItem.setFont(self.fnt)
        NameItem = QtWidgets.QTableWidgetItem("Name")
        NameItem.setFont(self.fnt)
        PasswordItem = QtWidgets.QTableWidgetItem("Password")
        PasswordItem.setFont(self.fnt)
        self.tableWidget.setHorizontalHeaderItem(0, EmailItem)
        self.tableWidget.setHorizontalHeaderItem(1, NameItem)
        self.tableWidget.setHorizontalHeaderItem(2, PasswordItem)
        self.tableWidget.setColumnWidth(0, 160)
        self.tableWidget.setColumnWidth(1, 85)
        self.tableWidget.setColumnWidth(2, 220)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger(False))
        #Menu:
        self.menuBar = QtWidgets.QMenuBar(PasswordManager)
        self.fileMenu1 = QtGui.QAction("Add/Change Password")
        self.fileMenu2 = QtGui.QAction("Delete Password")
        self.fileMenu3 = QtGui.QAction("Reflash")
        self.fileMenu4 = QtGui.QAction("Settings")
        self.fileMenu5 = QtGui.QAction("How to use")
        self.fileMenu6 = QtGui.QAction("Help")
        self.fileMenu1.setStatusTip("ACPW")
        self.fileMenu2.setStatusTip("DPW")
        self.fileMenu3.setStatusTip("RF")
        self.fileMenu4.setStatusTip("S")
        self.fileMenu5.setStatusTip("HTU")
        self.fileMenu6.setStatusTip("H")
        self.fileMenu1.triggered.connect(self.ADDPW)
        self.fileMenu2.triggered.connect(self.DELPW)
        self.fileMenu3.triggered.connect(self.start)
        self.fileMenu4.triggered.connect(self.Settings)
        self.fileMenu5.triggered.connect(self.HowToUse)
        self.fileMenu6.triggered.connect(self.help)
        self.menuBar.addAction(self.fileMenu1)
        self.menuBar.addAction(self.fileMenu2)
        self.menuBar.addAction(self.fileMenu3)
        self.menuBar.addAction(self.fileMenu4)
        self.menuBar.addAction(self.fileMenu5)
        self.menuBar.addAction(self.fileMenu6)
        #End#
        QtCore.QMetaObject.connectSlotsByName(PasswordManager)
        
        self.Login()
        if self.is_start == True:
            self.start()
        else:
            sys.exit()
        PasswordManager.setWindowIcon(QtGui.QIcon("icon.ico"))

        #commands
        self.tableWidget.itemDoubleClicked.connect(self.copyPassword)
        self.Search.textChanged.connect(self.__Search__)
        self.AddPassword.clicked.connect(self.ADDPW)
        self.Search_ComboBox.currentTextChanged.connect(self.__Search__)

        _translate = QtCore.QCoreApplication.translate
        PasswordManager.setWindowTitle(_translate("PasswordManager", "Password Manager By Extude"))
        self.AddPassword.setText(_translate("PasswordManager", "+ Add Password "))
        self.Title.setText(_translate("PasswordManager", "Password Manager"))
        self.label.setText(_translate("PasswordManager", "Search..."))

    def HowToUse(self):
        Dialog = QtWidgets.QDialog()
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 300)
        textEdit = QtWidgets.QTextEdit(Dialog)
        textEdit.setGeometry(QtCore.QRect(0, 70, 401, 231))
        textEdit.setObjectName("textEdit")
        label = QtWidgets.QLabel(Dialog)
        label.setGeometry(QtCore.QRect(50, 10, 281, 41))
        font = QtGui.QFont()
        font.setPointSize(28)
        font.setBold(False)
        label.setFont(font)
        label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        label.setObjectName("label")
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "How to Use"))
        textEdit.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Microsoft JhengHei UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">How to use?</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Add password : Add or change password</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">delete password : Delete password</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Reflash : Reflash password</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Settings : Settings</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Doubleclick forrn to copy Email or Name or Password</p></body></html>"))
        label.setText(_translate("Dialog", "How to use?"))
        Dialog.setWindowIcon(QtGui.QIcon("icon.ico"))
        Dialog.exec()
    
    def help(self):
        Dialog = QtWidgets.QDialog()
        Dialog.setObjectName("Dialog")
        Dialog.resize(401, 300)
        label = QtWidgets.QLabel(Dialog)
        label.setGeometry(QtCore.QRect(10, 10, 381, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        label.setFont(font)
        label.setObjectName("label")
        label_2 = QtWidgets.QLabel(Dialog)
        label_2.setGeometry(QtCore.QRect(290, 40, 101, 21))
        label_2.setObjectName("label_2")
        textBrowser = QtWidgets.QTextBrowser(Dialog)
        textBrowser.setGeometry(QtCore.QRect(0, 70, 401, 231))
        textBrowser.setObjectName("textBrowser")
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Help"))
        label.setText(_translate("Dialog", "Password Manager - A fast, simple software"))
        label_2.setText(_translate("Dialog", "-Made by Extude"))
        textBrowser.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Microsoft JhengHei UI\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Add Password: Add or change password</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Search: Search names</span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:11pt;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Everyone is permitted to copy and distribute verbatim copies</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">of this license document, but changing it is not allowed.</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">Preamble</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">The GNU General Public License is a free, copyleft license for</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">software and other kinds of works.</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">More details on </span><a href=\"https://www.gnu.org/licenses/gpl-3.0.txt\"><span style=\" font-size:11pt; text-decoration: underline; color:#0000ff;\">https://www.gnu.org/licenses/gpl-3.0.txt</span></a><span style=\" font-size:11pt;\"><br /></span></p></body></html>"))
        Dialog.setWindowIcon(QtGui.QIcon("icon.ico"))
        Dialog.exec()

    def Settings(self):
        Dialog = QtWidgets.QDialog()
        if not Dialog.objectName():
            Dialog.setObjectName(u"Dialog")
        Dialog.resize(271, 72)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName(u"label")
        self.label.setGeometry(QtCore.QRect(10, 10, 91, 21))
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setObjectName(u"label_2")
        self.label_2.setGeometry(QtCore.QRect(10, 40, 71, 20))
        self.set_form_height_spinBox = QtWidgets.QSpinBox(Dialog)
        self.set_form_height_spinBox.setObjectName(u"set_form_height_spinBox")
        self.set_form_height_spinBox.setGeometry(QtCore.QRect(110, 10, 61, 22))
        self.DarkMode = QtWidgets.QCheckBox(Dialog)
        self.DarkMode.setObjectName(u"DarkMode")
        self.DarkMode.setGeometry(QtCore.QRect(80, 40, 20, 20))
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setObjectName(u"buttonBox")
        self.buttonBox.setGeometry(QtCore.QRect(110, 40, 141, 21))
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Cancel|QtWidgets.QDialogButtonBox.StandardButton.Ok)
        self.checkBox = QtWidgets.QCheckBox(Dialog)
        self.checkBox.setObjectName(u"checkBox")
        self.checkBox.setGeometry(QtCore.QRect(180, 10, 78, 20))
        Dialog.setWindowTitle(QtCore.QCoreApplication.translate("Dialog", u"Settings", None))
        self.label.setText(QtCore.QCoreApplication.translate("Dialog", u"Set form height:", None))
        self.label_2.setText(QtCore.QCoreApplication.translate("Dialog", u"Dark Mode:", None))
        self.DarkMode.setText("")
        self.buttonBox.accepted.connect(lambda: self.value(Dialog))
        self.buttonBox.rejected.connect(lambda: Dialog.close())
        self.checkBox.setText(QtCore.QCoreApplication.translate("Dialog", u"json mode", None))

        self.set_form_height_spinBox.setMinimum(24)
        self.set_form_height_spinBox.setMaximum(200)
        self.set_form_height_spinBox.setValue(self.JSONFORMHEIGHT)
        Dialog.setWindowIcon(QtGui.QIcon("icon.ico"))
        Dialog.exec()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    PasswordManager = QtWidgets.QWidget()
    ui = Ui_PasswordManager()
    ui.setupUi(PasswordManager)
    PasswordManager.show()
    sys.exit(app.exec())